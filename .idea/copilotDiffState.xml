<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="# GoStore - E-commerce Microservices Platform&#10;&#10;A modern, scalable e-commerce platform built with Go microservices architecture, featuring comprehensive product management, user authentication, and robust data modeling.&#10;&#10;## ️ Architecture&#10;&#10;```&#10;┌─────────────────────────────────────────────────────────────────┐&#10;│                           Client                                │&#10;└─────────────────────┬───────────────────────────────────────────┘&#10;                      │&#10;┌─────────────────────▼───────────────────────────────────────────┐&#10;│                      API Gateway (Nginx)                       │&#10;└─┬─────────┬─────────┬─────────┬─────────┬─────────┬─────────────┘&#10;  │         │         │         │         │         │&#10;┌─▼──────┐ ┌▼──────┐ ┌▼──────┐ ┌▼──────┐ ┌▼──────┐ ┌▼──────┐&#10;│Identity│ │  Cart │ │Product│ │Inventory│ │ Order │ │Future │&#10;│Service │ │Service│ │Service│ │ Service │ │Service│ │Services│&#10;└─┬──────┘ └┬──────┘ └┬──────┘ └┬───────┘ └┬──────┘ └───────┘&#10;  │         │         │         │          │&#10;┌─▼──────┐ ┌▼──────┐ ┌▼──────┐ ┌▼───────┐ ┌▼──────┐&#10;│Identity│ │ Cart  │ │Product│ │Inventory│ │ Order │&#10;│   DB    │ │  DB   │ │  DB   │ │   DB    │ │  DB   │&#10;│(Postgres)│(Postgres)│(Postgres)│(Postgres)│(Postgres)&#10;└────────┘ └───────┘ └───────┘ └────────┘ └───────┘&#10;```&#10;&#10;##  Services&#10;&#10;### Identity Service&#10;- **Purpose**: User authentication, authorization, and profile management&#10;- **Features**:&#10;  - JWT-based authentication&#10;  - Role-based access control (RBAC)&#10;  - User registration and login&#10;  - Password management&#10;  - Profile updates&#10;&#10;### Product Service&#10;- **Purpose**: Product catalog management with complex SKU handling&#10;- **Features**:&#10;  - Product CRUD operations&#10;  - Dynamic SKU generation with multiple options (size, color, material, etc.)&#10;  - Category and brand management&#10;  - Product attributes and options system&#10;  - Sale price management with time-based validity&#10;  - Bulk product seeding capabilities&#10;&#10;## ️ Tech Stack&#10;&#10;- **Language**: Go 1.24.3&#10;- **Framework**: Gin (HTTP router)&#10;- **Database**: PostgreSQL&#10;- **ORM**: GORM&#10;- **Authentication**: JWT&#10;- **Password Hashing**: bcrypt&#10;- **Configuration**: godotenv&#10;&#10;##  Project Structure&#10;&#10;```&#10;go-store/&#10;├── internal/&#10;│   ├── pkg/                    # Shared packages&#10;│   │   ├── entity/            # Base entities&#10;│   │   ├── logger/            # Logging utilities&#10;│   │   └── rest/              # REST utilities &amp; error handling&#10;│   └── services/&#10;│       ├── identity/          # Authentication &amp; user management&#10;│       │   ├── cmd/           # Service entry point&#10;│       │   ├── db/            # Database schemas &amp; seed data&#10;│       │   └── internal/      # Service-specific logic&#10;│       └── product/           # Product catalog management&#10;│           ├── cmd/           # Service entry point &amp; seeder&#10;│           ├── db/            # Database schemas &amp; seed data&#10;│           └── internal/      # Service-specific logic&#10;```&#10;&#10;## ‍♂️ Getting Started&#10;&#10;### Prerequisites&#10;- Go 1.24.3 or higher&#10;- PostgreSQL 12+&#10;- Git&#10;&#10;### Installation&#10;&#10;1. **Clone the repository**&#10;   ```bash&#10;   git clone https://github.com/hthinh24/go-store.git&#10;   cd go-store&#10;   ```&#10;&#10;2. **Setup databases**&#10;   ```bash&#10;   # Create databases for each service&#10;   createdb gostore_identity&#10;   createdb gostore_product&#10;   ```&#10;&#10;3. **Environment configuration**&#10;   &#10;   Create `.env` files for each service:&#10;   &#10;   **Identity Service** (`internal/services/identity/.env`):&#10;   ```env&#10;   PORT=8001&#10;   DB_HOST=localhost&#10;   DB_USER=your_username&#10;   DB_PASSWORD=your_password&#10;   DB_NAME=gostore_identity&#10;   DB_PORT=5432&#10;   JWT_SECRET=your_jwt_secret_key&#10;   ```&#10;   &#10;   **Product Service** (`internal/services/product/.env`):&#10;   ```env&#10;   PORT=8002&#10;   DB_HOST=localhost&#10;   DB_USER=your_username&#10;   DB_PASSWORD=your_password&#10;   DB_NAME=gostore_product&#10;   DB_PORT=5432&#10;   ```&#10;&#10;4. **Database setup**&#10;   ```bash&#10;   # Identity Service&#10;   cd internal/services/identity&#10;   psql -d gostore_identity -f db/shema.sql&#10;   psql -d gostore_identity -f db/roles_permissions_data.sql&#10;   &#10;   # Product Service&#10;   cd ../product&#10;   psql -d gostore_product -f db/schemaV2.sql&#10;   psql -d gostore_product -f db/seed_data.sql&#10;   ```&#10;&#10;5. **Install dependencies**&#10;   ```bash&#10;   # Identity Service&#10;   cd internal/services/identity&#10;   go mod tidy&#10;   &#10;   # Product Service&#10;   cd ../product&#10;   go mod tidy&#10;   ```&#10;&#10;##  Running the Services&#10;&#10;### Identity Service&#10;```bash&#10;cd internal/services/identity&#10;go run cmd/main.go&#10;# Service will start on port 8001&#10;```&#10;&#10;### Product Service&#10;```bash&#10;cd internal/services/product&#10;go run cmd/main.go&#10;# Service will start on port 8002&#10;```&#10;&#10;### Product Seeding&#10;The product service includes powerful seeding capabilities:&#10;&#10;```bash&#10;cd internal/services/product&#10;&#10;# Seed 50 random products&#10;make seed-random COUNT=50&#10;&#10;# Seed 20 men's clothing items&#10;make seed-mens COUNT=20&#10;&#10;# Seed diverse product mix&#10;make seed-diverse COUNT=30&#10;&#10;# Seed in batch mode&#10;make seed-batch COUNT=100&#10;```&#10;&#10;##  Database Schema Highlights&#10;&#10;### Product Schema Features&#10;- **Complex SKU System**: Automatic SKU generation based on product options&#10;- **Dynamic Pricing**: Base price + SKU-specific price modifiers&#10;- **Sale Management**: Time-based sale prices with start/end dates&#10;- **Rich Attributes**: Flexible product attributes and options system&#10;- **Inventory Tracking**: Stock management per SKU&#10;- **SEO-Friendly**: Automatic slug generation with conflict resolution&#10;&#10;### Identity Schema Features&#10;- **Role-Based Access**: Hierarchical permission system&#10;- **Secure Authentication**: Bcrypt password hashing + JWT tokens&#10;- **User Profiles**: Comprehensive user information management&#10;&#10;##  API Endpoints&#10;&#10;### Identity Service (Port 8001)&#10;```&#10;POST   /api/auth/register     # User registration&#10;POST   /api/auth/login        # User login&#10;POST   /api/auth/refresh      # Refresh JWT token&#10;GET    /api/users/profile     # Get user profile&#10;PUT    /api/users/profile     # Update user profile&#10;PUT    /api/users/password    # Change password&#10;```&#10;&#10;### Product Service (Port 8002)&#10;```&#10;GET    /api/products          # List products (with pagination)&#10;POST   /api/products          # Create product (with auto-SKU generation)&#10;GET    /api/products/:id      # Get product details&#10;PUT    /api/products/:id      # Update product&#10;DELETE /api/products/:id      # Delete product&#10;GET    /api/categories        # List categories&#10;GET    /api/brands           # List brands&#10;```&#10;&#10;##  Testing &amp; Development&#10;&#10;### Sample Data&#10;The project includes comprehensive seed data:&#10;- **Categories**: Electronics, Fashion, Home &amp; Garden, Sports, Books, etc.&#10;- **Brands**: Nike, Apple, Samsung, Zara, IKEA, etc.&#10;- **Attributes**: Size, Color, Material, Storage, RAM, etc.&#10;- **Product Variations**: Automatic SKU generation for all combinations&#10;&#10;### Product Creation Example&#10;```json&#10;{&#10;  &quot;name&quot;: &quot;Premium Cotton T-Shirt&quot;,&#10;  &quot;description&quot;: &quot;High-quality cotton t-shirt&quot;,&#10;  &quot;base_price&quot;: 29.99,&#10;  &quot;category_id&quot;: 1,&#10;  &quot;brand_id&quot;: 1,&#10;  &quot;option_values&quot;: {&#10;    &quot;1&quot;: [&quot;S&quot;, &quot;M&quot;, &quot;L&quot;, &quot;XL&quot;],     // Size options&#10;    &quot;2&quot;: [&quot;Red&quot;, &quot;Blue&quot;, &quot;Black&quot;],   // Color options&#10;    &quot;3&quot;: [&quot;Cotton&quot;, &quot;Blend&quot;]         // Material options&#10;  }&#10;}&#10;```&#10;This will automatically generate 24 SKUs (4×3×2) with unique identifiers.&#10;&#10;##  Configuration&#10;&#10;### Environment Variables&#10;- `PORT`: Service port number&#10;- `DB_*`: Database connection parameters&#10;- `JWT_SECRET`: Secret key for JWT token signing (Identity Service)&#10;&#10;### Database Configuration&#10;- PostgreSQL with GORM ORM&#10;- Automatic migrations on startup&#10;- Connection pooling and optimization&#10;&#10;##  Roadmap&#10;&#10;- [ ] **Cart Service**: Shopping cart management&#10;- [ ] **Order Service**: Order processing and management&#10;- [ ] **Inventory Service**: Advanced inventory tracking&#10;- [ ] **Payment Service**: Payment processing integration&#10;- [ ] **Notification Service**: Email and SMS notifications&#10;- [ ] **Search Service**: Elasticsearch integration&#10;- [ ] **File Storage**: Image and media management&#10;- [ ] **API Gateway**: Centralized routing and rate limiting&#10;&#10;##  Contributing&#10;&#10;1. Fork the repository&#10;2. Create your feature branch (`git checkout -b feature/amazing-feature`)&#10;3. Commit your changes (`git commit -m 'Add some amazing feature'`)&#10;4. Push to the branch (`git push origin feature/amazing-feature`)&#10;5. Open a Pull Request&#10;&#10;##  License&#10;&#10;This project is licensed under the MIT License - see the LICENSE file for details.&#10;&#10;## ‍ Author&#10;&#10;**Hung Thinh** - [hthinh24](https://github.com/hthinh24)&#10;&#10;---&#10;&#10;*Building a comprehensive e-commerce platform with modern microservices architecture. Each service is designed to be scalable, maintainable, and production-ready.*" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>