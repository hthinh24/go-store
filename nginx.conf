# Basic nginx configuration for Windows
worker_processes 1;

events {
    worker_connections 1024;
}

http {
    upstream auth_service {
        server localhost:8001; # Use IPv4 directly instead of localhost
    }

    upstream payment_service {
        server localhost:8002; # Use IPv4 directly instead of localhost
    }

    server {
        listen 80; # NGINX listens on port 80 for incoming requests

        # Internal auth endpoint
        location = /auth {
            internal; # This location is only accessible internally
            proxy_pass http://auth_service/auth;

            # Attach X-Authenticated to original request
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Original-Remote-Addr $remote_addr;
            proxy_set_header X-Original-Host $host;
            proxy_set_header Authentication-Token $http_authentication_token;
        }

        # Main location that requires authentication
        location /payments {
            auth_request /auth; # Use auth_request for authentication

            # Capture X-Authenticated header from auth response
            auth_request_set $auth_user $upstream_http_x_authenticated;
            
            # If auth succeeds, proxy to payment service
            proxy_pass http://payment_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authentication-Token $http_authentication_token;

            # Pass the X-Authenticated header from auth service to payment service
            proxy_set_header X-Authenticated $auth_user;
        }

        # Handle auth errors - return 401 for unauthorized
        error_page 401 @error401;
        location @error401 {
            return 401 '{"error": "Unauthorized", "message": "Authentication required"}';
            add_header Content-Type application/json;
        }

        # Handle other auth service errors
        error_page 403 @error403;
        location @error403 {
            return 403 '{"error": "Forbidden", "message": "Access denied"}';
            add_header Content-Type application/json;
        }
    }
}